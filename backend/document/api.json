{
  "openapi": "3.0.0",
  "info": {
    "title": "Users and Videos API",
    "description": "API for managing users and videos",
    "version": "1.0.0"
  },
  "paths": {
    "/users/get_users/{user_id}": {
      "get": {
        "summary": "Get all users",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Users"],
        "description": "Endpoint to get all users."
      }
    },
    "/users/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": ["Users"],
        "description": "Endpoint to register a new user."
      }
    },
    "/users/authenticate": {
      "post": {
        "summary": "Authenticate user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Authentication failed"
          }
        },
        "tags": ["Users"],
        "description": "Endpoint to authenticate a user."
      }
    },
    "/users/edit/{user_id}": {
      "put": {
        "summary": "Edit user information",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User edited successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error updating user"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Users"],
        "description": "Endpoint to edit user information."
      }
    },
    "/users/delete/{user_id}": {
      "delete": {
        "summary": "Delete user",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Error deleting user"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Users"],
        "description": "Endpoint to delete a user."
      }
    },
    "/videos/register/{user_id}": {
      "post": {
        "summary": "Create a new video",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Video"
              },
              "example": {
                "title": "My Video",
                "description": "This is a sample video",
                "credits": "John Doe",
                "videoUrl": "https://example.com/video.mp4",
                "category": "comedy",
                "private": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Videos"],
        "description": "Endpoint to create a video."
      }
    },
    "/videos/react/{video_id}": {
      "put": {
        "summary": "React to a video",
        "parameters": [
          {
            "in": "path",
            "name": "video_id",
            "required": true,
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video reacted successfully"
          },
          "404": {
            "description": "Video not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Videos"],
        "description": "Endpoint to react to a video."
      }
    },
    "/videos/my_videos/{user_id}": {
      "get": {
        "summary": "Get user's videos",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's videos retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Videos"],
        "description": "Endpoint to get videos of a specific user."
      }
    },
    "/videos/video_type/{user_id}": {
      "get": {
        "summary": "Get videos based on privacy type",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Videos retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Videos"],
        "description": "Endpoint to get videos based on privacy type."
      }
    },
    "/videos/top_rated/{user_id}": {
      "get": {
        "summary": "Get top-rated videos",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": false,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Top-rated videos retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Videos"],
        "description": "Endpoint to get top-rated videos."
      }
    },
    "/videos/view/{video_id}/{user_id}": {
      "get": {
        "summary": "View a video",
        "parameters": [
          {
            "in": "path",
            "name": "video_id",
            "required": true,
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": false,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video viewed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Video not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Videos"],
        "description": "Endpoint to view a video."
      }
    },
    "/videos/edit/{video_id}/{user_id}": {
      "put": {
        "summary": "Edit a video",
        "parameters": [
          {
            "in": "path",
            "name": "video_id",
            "required": true,
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Video"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Video edited successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Video not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Videos"],
        "description": "Endpoint to edit a video."
      }
    },
    "/videos/delete/{video_id}/{user_id}": {
      "delete": {
        "summary": "Delete a video",
        "parameters": [
          {
            "in": "path",
            "name": "video_id",
            "required": true,
            "description": "Video ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Video not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "tags": ["Videos"],
        "description": "Endpoint to delete a video."
      }
    }
  },
  "components": {
    "schemas": {
      "Video": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "credits": {
            "type": "string"
          },
          "videoUrl": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "comedy",
              "terror",
              "motivation",
              "podcast",
              "game",
              "tutorial"
            ]
          },
          "authorId": {
            "type": "string"
          },
          "numLikes": {
            "type": "number",
            "default": 0
          },
          "comentaries": {
            "type": "array"
          },
          "videoRating": {
            "type": "number",
            "default": 0.0
          },
          "viewsNumber": {
            "type": "number",
            "default": 0
          },
          "private": {
            "type": "boolean"
          },
          "userRatings": {
            "type": "array"
          },
          "publicatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "title",
          "description",
          "videoUrl",
          "category",
          "authorId",
          "private"
        ],
        "example": {
          "title": "My Video",
          "description": "This is a sample video",
          "credits": "John Doe",
          "videoUrl": "https://example.com/video.mp4",
          "category": "comedy",
          "authorId": "user123",
          "numLikes": 0,
          "comentaries": [],
          "videoRating": 0.0,
          "viewsNumber": 0,
          "private": true,
          "userRatings": [],
          "publicatedAt": "2024-02-04T12:34:56Z"
        }
      },
      "UserAuthentication": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["email, password"],
        "example": {
          "email": "alguien@gmail.com",
          "password": "12345678"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "userType": {
            "type": "string",
            "enum": ["user", "admin"],
            "default": "user"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["name", "lastname", "username", "email", "password"],
        "example": {
          "name": "John",
          "lastname": "Doe",
          "username": "johndoe",
          "email": "john.doe@example.com",
          "password": "hashedpassword",
          "userType": "user",
          "createdAt": "2024-02-04T12:34:56Z",
          "updatedAt": "2024-02-04T12:34:56Z"
        }
      }
    }
  }
}
